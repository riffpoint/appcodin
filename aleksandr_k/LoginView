@EFragment(R.layout.fragment_email_entrance)
public class EmailEntranceFragment extends BaseSocialFragment implements IEmailEntranceView {

    private static final String TAG = EmailEntranceFragment.class.getSimpleName();
    public static final String KEY_EMAIL = "email";
    public static final String KEY_PASSWORD = "password";
    private EmailEntrancePresenter presenter;

    @ViewById(R.id.login_email_edit_text)
    EditText mEmailEditText;

    @ViewById(R.id.login_password_edit_text)
    EditText mPasswordEditText;

    @ViewById(R.id.mail_social_container)
    RelativeLayout mMailSocialContainer;

    @ViewById(R.id.login_entrance_social_text)
    TextView mOrLoginTextView;


    private ConfirmationCodeFragment.IRegistrationObserver mCallback;
    private IToolbarObserver mToolbarObserver;
    private String mPassword;
    private String mEmail;

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);

        try {
            mCallback = (ConfirmationCodeFragment.IRegistrationObserver) context;
            mToolbarObserver = (IToolbarObserver) context;
        } catch (ClassCastException e) {
            throw new ClassCastException(context.toString()
                    + " must implement OnHeadlineSelectedListener");
        }
    }

    @Override
    void onLoginButtonClick() {
        String email = mEmailEditText.getText().toString();
        String password = mPasswordEditText.getText().toString();
        if(checkEmailAndPassValid(email, password)){
            mPassword = password;
            mEmail = email;
            presenter.sendAuthorizeRequest(email, password);
            mToolbarObserver.showProgress();
            mToolbarObserver.hideKeyboard();
        }
    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        presenter = new EmailEntrancePresenter(this);
    }

    @AfterViews
    void initUI(){
        mToolbarObserver.showToolbar("Login");
        mMailSocialContainer.setVisibility(View.GONE);
        Bundle bundle = this.getArguments();
        if (bundle != null) {
            String email = bundle.getString(KEY_EMAIL);
            if(email!=null){
                mEmailEditText.setText(email);
            }
        }
        mOrLoginTextView.setText(R.string.or_log_in_with);
        mEmailEditText.requestFocus();
    }

    private boolean checkEmailAndPassValid(String email, String password) {
        boolean result = true;

        result = validateEmail(email);

        result = validatePassword(password, result);

        return result;
    }

    private boolean validatePassword(String password, boolean result) {
        if(TextUtils.getTrimmedLength(password) < PASSWORD_LIMIT){
            Toast.makeText(getContext(), getResources().getString(R.string.error) + " Password must have at least 6 characters", Toast.LENGTH_LONG).show();
            result = false;
        }
        return result;
    }

    @Click(R.id.email_entrance_forget_password_view)
    void onForgetClick(){
        replaceFragment(ForgotPasswordFragment.newInstance());
    }



    @Override
    public void authorizeResult(UserId id) {
        if(id != null){
            PreferencesHelper.storeEmail(getContext(), mEmail);
            mCallback.onConfirmSuccess(String.valueOf(id.getId()), true);
        } else {
            mToolbarObserver.hideProgress();
            Toast.makeText(getContext(), "Authorization is failed", Toast.LENGTH_LONG).show();
        }
    }

    @Override
    public void recallPasswordResult(Boolean isSuccess) {
        if(isSuccess){
            Toast.makeText(getContext(), "Password is sending to your mail", Toast.LENGTH_LONG).show();
        } else {
            Toast.makeText(getContext(), "Reset password is failed", Toast.LENGTH_LONG).show();
        }
    }

    @Override
    public void authorizeFailed(String message) {
        mToolbarObserver.hideProgress();
        if(message.contains(getString(R.string.error))){
            Toast.makeText(getContext(), message, Toast.LENGTH_LONG).show();
        } else {
            Toast.makeText(getContext(), "Authorization is failed", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        presenter.onDestroy();
    }
}
